React is a JavaScript library for building user interfaces.

React is used to build single-page applications.

React allows us to create reusable UI components.

>>>
Instead of manipulating the browser's DOM directly, React creates a virtual DOM in memory, where it does all the necessary manipulating, before making the changes in the browser DOM.
React only changes what needs to be changed!


>>>
React renders HTML to the web page by using a function called createRoot() and its method render().

The createRoot() function takes one argument, an HTML element.

The purpose of the function is to define the HTML element where a React component should be displayed.
The render() method is then called to define the React component that should be rendered.

>>>
What is JSX?

JSX stands for JavaScript XML.

JSX allows us to write HTML in React.

JSX makes it easier to write and add HTML in React.

JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.

JSX is an extension of the JavaScript language based on ES6, and is translated into regular JavaScript at runtime.

With JSX you can write expressions inside curly braces { }.
const myElement = <h1>React is {5 + 5} times better with JSX</h1>;

JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.


>>>

Components are like functions that return HTML elements.
Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation and return HTML.

Components come in two types, Class components and Function components, in this tutorial we will concentrate on Function components.

Class Component
A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, and gives your component access to React.Component's functions.

Function Component
Here is the same example as above, but created using a Function component instead.

A Function component also returns HTML, and behaves much the same way as a Class component, but Function components can be written using much less code, are easier to understand, and will be preferred in this tutorial.

Note that the Components filename must start with an uppercase character.

>>>

React Props
React Props are like function arguments in JavaScript and attributes in HTML.

To send props into a component, use the same syntax as HTML attributes:

>>>

React Events

Just like HTML DOM events, React can perform actions based on user events.

React has the same events as HTML: click, change, mouseover etc.

React events are written in camelCase syntax:

To pass an argument to an event handler, use an arrow function. because if executes the fucntion on page load without interaction

React Lists
In React, you will render lists with some type of loop.

The JavaScript map() array method is generally the preferred method.


>>> in form submition

This will work as normal, the form will submit and the page will refresh.

But this is generally not what we want to happen in React.

We want to prevent this default behavior and let React control the form.
this is used :  event.preventDefault();

>>>

Add React Router
We wrap our content first with <BrowserRouter>.

Then we define our <Routes>. An application can have multiple <Routes>. Our basic example only uses one.

<Route>s can be nested. The first <Route> has a path of / and renders the Layout component.

>>>
Using memo will cause React to skip rendering a component if its props have not changed.

>>>

Styling React Using CSS

Inline styling
CSS stylesheets
CSS Modules

Create a new file called "App.css" and insert some CSS code in it:
Import the stylesheet in your application: {import './App.css';}

CSS Modules

Create the CSS module with the .module.css extension, example: my-style.module.css.
use it like this;
import styles from './my-style.module.css'; 


>>>

What is a Hook?
Hooks allow us to "hook" into React features such as state and lifecycle methods.
Here we are using the useState Hook to keep track of the application state.

State generally refers to application data or properties that need to be tracked.

There are 3 rules for hooks:

Hooks can only be called inside React function components.
Hooks can only be called at the top level of a component.
Hooks cannot be conditional


Initialize useState
We initialize our state by calling useState in our function component.

useState accepts an initial state and returns two values:

The current state.
A function that updates the state.

What Can State Hold
The useState Hook can be used to keep track of strings, numbers, booleans, arrays, objects, and any combination of these!

We could create multiple state Hooks to track individual values.